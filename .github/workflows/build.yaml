name: Build OpenWrt for specific target and release

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
  #push:
  schedule:
    - cron: "0 */4 * * *"

env:
  REMOTE_REPOSITORY: openwrt/openwrt
  REMOTE_BRANCH: main
  CONFIG_FILE: jdcloud_luban.config
  CUSTOM_FILES_PATH: files/
  RELEASE_PREFIX: main

jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-24.04
    outputs:
      new_commits: ${{ steps.check_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_commits.outputs.latest_commit_sha }}
    steps:
      - name: Check for new commits in both repositories
        id: check_commits
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_sha=$(gh api "repos/${{ env.REMOTE_REPOSITORY }}/commits/${{ env.REMOTE_BRANCH }}" --jq .sha)
          release_body=$(gh api "repos/${{ github.repository }}/releases/latest" --jq .body 2>/dev/null || echo "")

          new_commits=$([[ "$release_body" == *"$latest_sha"* ]] && echo "false" || echo "true")

          echo "new_commits=$new_commits" >> "$GITHUB_OUTPUT"
          echo "latest_commit_sha=$latest_sha" >> "$GITHUB_OUTPUT"

  build:
    name: Build OpenWrt
    needs: check_commits
    if: github.event_name == 'workflow_dispatch' || needs.check_commits.outputs.new_commits == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Install dependencies
        run: sudo apt update && sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget
      
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
        shell: bash
        
      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}

      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "builder_repo"
          
      - name: cache
        uses: actions/cache@v4
        with:
          key: openwrt-build-${{ steps.get-date.outputs.date }}
          path: |
            dl
            feeds
            staging_dir
            tmp
          restore-keys: |
            openwrt-build-${{ steps.get-date.outputs.date }}
            openwrt-build

      - name: Add custom patches
        run: |
          df -h
          if [ -d "builder_repo/patches" ] && [ "$(ls -A builder_repo/patches 2>/dev/null)" ]; then
            mv builder_repo/patches/* ./
            for patch in *.patch; do
              [ -f "$patch" ] && git apply --verbose "$patch"
            done
          fi

      - name: Patch for JDCloud Luban
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          df -h
          cp builder_repo/jdcloud_luban.patch jdcloud_luban.patch
          ls -al jdcloud_luban.patch && sha256sum jdcloud_luban.patch
          git apply --verbose --ignore-space-change jdcloud_luban.patch

      - name: Update and install feeds
        run: |
          df -h
          #echo 'src-git custom https://github.com/kiddin9/kwrt-packages' >> feeds.conf.default
          ./scripts/feeds update -a && ./scripts/feeds install -a
          #git clone https://github.com/xiaorouji/openwrt-passwall2.git package/feeds/luci/luci-app-passwall2
          #git clone https://github.com/xiaorouji/openwrt-passwall-packages.git package/utils/passwall2
          git clone https://github.com/jerrykuku/luci-theme-argon.git package/feeds/luci/luci-theme-argon
          git clone https://github.com/jerrykuku/luci-app-argon-config.git package/feeds/luci/luci-app-argon-config
          #git clone https://github.com/dgyangxf/luci-app-vlmcsd.git package/feeds/luci/luci-app-vlmcsd
          #git clone https://github.com/im-0/openwrt-package.vlmcsd.git package/utils/vlmcsd
          #git clone https://github.com/sbwml/openwrt-qBittorrent package/feeds/qBittorrent

      - name: Setup configuration and custom files
        run: |
          df -h
          mv builder_repo/${{ env.CONFIG_FILE }} .config
          echo "CONFIG_PACKAGE_luci-app-argon-config=y" >> .config
          echo "CONFIG_PACKAGE_luci-theme-argon=y=y" >> .config
          make defconfig -j$(nproc)
          mkdir -p ${{ env.CUSTOM_FILES_PATH }}
          [ -d "builder_repo/${{ env.CUSTOM_FILES_PATH }}" ] && mv builder_repo/${{ env.CUSTOM_FILES_PATH }}* ${{ env.CUSTOM_FILES_PATH }} || true

      - name: Download source
        run: |
          df -h
          make download -j$(nproc)
          
      - name: Build firmware
        run: |
          df -h
          make check -j$(nproc) FIXUP=1 V=s
          make -j$(nproc) || make -j1 V=s  # Retry single-threaded on failure
          tar cvzf bin/targets/ramips/mt7621/packages.tar.gz -C bin/targets/ramips/mt7621 packages
          tar cvzf bin/targets/ramips/mt7621/mips_24kc.tar.gz -C bin/packages/mipsel_24kc .
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mt7621-images
          path: bin/targets/ramips/mt7621

      - name: Check disk space usage
        run: df -h
        
  release:
    name: Create release
    needs: [check_commits, build]
    if: needs.build.result == 'success'
    runs-on: ubuntu-24.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: mt7621-images
          path: firmware
      - name: Set release date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV
      - name: Publish release
        uses: softprops/action-gh-release@master
        with:
          files: firmware/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: 🚀 OpenWrt Build Release ${{ env.RELEASE_DATE }}
          body: |
            ## 📦 OpenWrt Automated Build Release

            **Build Date:** ${{ env.RELEASE_DATE }}

            ### 🔄 Main Repository
            **Repository:** [${{ env.REMOTE_REPOSITORY }}](https://github.com/${{ env.REMOTE_REPOSITORY }})
            **Branch:** `${{ env.REMOTE_BRANCH }}`
            **Commit:** `${{ needs.check_commits.outputs.latest_commit_sha }}`

            ### 📝 Build Information
            - **Target:** [JDCloud RE-CP-02 鲁班]
            - **Configuration:** [`${{ env.CONFIG_FILE }}`](${{ env.CONFIG_FILE }})

            ### 📋 Notes
            - Automated build triggered by ${{ github.event_name }}
            - Previous releases are automatically cleaned up (keeping latest 5)
            ---
            _Generated by GitHub Actions 🤖_

      - name: Clean up old releases
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api repos/${{ github.repository }}/releases --paginate --jq '.[5:] | .[] | "\(.id) \(.tag_name)"' | while read id tag; do
            gh api -X DELETE "repos/${{ github.repository }}/releases/$id" && gh api -X DELETE "repos/${{ github.repository }}/git/refs/tags/$tag" 2>/dev/null || true
          done
